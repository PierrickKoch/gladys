#!/usr/bin/env python

import struct
import colorsys

try:
    from PySide import QtCore, QtGui
except ImportError:
    print("[error] sudo apt-get install python-pyside")
    import sys; sys.exit(1)

try:
    import gladys
except ImportError:
    print("[error] install gladys [and setup PYTHONPATH]")
    import sys; sys.exit(1)

def float_to_rgb(hue):
    assert(0.0 <= hue <= 1.0)
    # from blue to red (instead of red to red)
    # aka from 240 to 0 instead of 0 to 360 degrees (HSV)
    hue = (1 - hue) / 1.5
    return colorsys.hsv_to_rgb(hue, 1, 1)

def uint_to_rgb(hue):
    r, g, b = float_to_rgb(hue / 255.0)
    return int(r*255), int(g*255), int(b*255)

HSVH_COLORTABLE = [QtGui.QColor(*uint_to_rgb(i)).rgb() for i in range(256)]

def main(argv=[]):
    if len(argv) < 3:
        print("usage: %s geo.tif patern"%argv[0])
        return 1

    geotiff = gladys.gdal(argv[1])
    bands   = geotiff.get_bands_as_uchar()
    width   = geotiff.get_width()
    height  = geotiff.get_height()

    for name, image8u in bands.items():
        # Convert from list(uint8_t) to bytes() [TODO find memoryview in bpy]
        buff = struct.pack('%iB'%len(image8u), *image8u)
        assert(len(buff) == width * height)
        # QImage does not holds the buffer, it is valid only in this scope (!)
        image = QtGui.QImage(buff, width, height, width, QtGui.QImage.Format_Indexed8)
        # Set image lookup table (LUT) / PySide.QtGui.QImage.setColorTable()
        # http://qt-project.org/doc/qt-5.1/qtgui/qimage.html#setColorTable
        image.setColorTable(HSVH_COLORTABLE)
        # If needed to draw on the QImage, first .convertToFormat(Format_ARGB32)
        image.save("%s.%s.png" % (argv[2], name) )

    return 0

if __name__ == '__main__':
    import sys
    sys.exit( main(sys.argv) )

